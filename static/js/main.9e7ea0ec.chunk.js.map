{"version":3,"sources":["components/text.js","components/input.js","util/editingTypes.js","components/page.js","components/capture.js","components/settings.js","components/print.js","App.js","serviceWorker.js","index.js"],"names":["Text","bounds","textid","this","props","textId","className","onDoubleClick","editText","style","position","top","editLocation","y","left","x","children","React","Component","Input","onKeyPress","e","which","doneEditing","type","autoFocus","defaultValue","editValue","onChange","handleInput","onClick","Page","state","lines","isEditing","pendingLine","editLine","bind","addLine","setState","clientX","window","innerWidth","clientY","innerHeight","stopPropagation","selectedText","target","getAttribute","key","text","trim","newKey","Date","toISOString","console","log","value","marginTop","Object","values","Capture","capturePage","html2canvas","document","querySelector","then","canvas","body","appendChild","Settings","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e7ea0ec.chunk.js","sourcesContent":["import React from 'react';\nimport Draggable from 'react-draggable';\n\nimport '../styles/text.css';\n\nclass Text extends React.Component{\n\n    render(){\n        return(\n                <Draggable bounds=\"parent\">\n                    <div\n                        textid={this.props.textId}\n                        className=\"text\"\n                        onDoubleClick={this.props.editText}\n                        style={{\n                            position: 'absolute',\n                            top: this.props.editLocation ? `${this.props.editLocation.y}px` : '0px',\n                            left: this.props.editLocation ? `${this.props.editLocation.x}px` : '0px'\n                        }}\n                    >{this.props.children}</div>\n                </Draggable>      \n        )\n    }\n}\n\nexport default Text;","import React from 'react';\nimport '../styles/input.css';\n\nimport {\n    ADD_LINE,\n    EXIT,\n    REMOVE_LINE\n} from '../util/editingTypes';\n\nconst Input = props => {\n\n    const handleEnter = e => {\n        if(e.which === 13) props.doneEditing(ADD_LINE);\n    }\n\n    return(\n        <div className=\"input\" onKeyPress={handleEnter}\n            style={{\n            position: 'absolute',\n            top: `${props.editLocation.y}px`,\n            left: `${props.editLocation.x}px`\n        }}>\n            <input type=\"text\" autoFocus defaultValue={props.editValue} className=\"input-text\" onChange={props.handleInput}></input>\n            <button className=\"input-button add-button\" onClick={() => props.doneEditing(ADD_LINE)}>add</button>\n            <button className=\"input-button exit-button\" onClick={() => props.doneEditing(EXIT)}>exit</button>\n            <button className=\"input-button remove-button\" onClick={() => props.doneEditing(REMOVE_LINE)}>remove</button>\n        </div>     \n    )\n}\n\nexport default Input;","export const ADD_LINE = 'ADD_LINE';\nexport const EXIT = 'EXIT';\nexport const REMOVE_LINE = 'REMOVE_LINE';","import React from 'react';\nimport Text from './text';\nimport Input from './input';\nimport '../styles/page.css';\n\nimport {\n    ADD_LINE,\n    EXIT,\n    REMOVE_LINE\n} from '../util/editingTypes';\n\nclass Page extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            lines: {},\n            isEditing: false,\n            editValue: '',\n            pendingLine: '',\n            editLocation: {\n                x: '',\n                y: ''\n            }\n        }\n        this.editLine = this.editLine.bind(this);\n        this.doneEditing = this.doneEditing.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n        this.editText = this.editText.bind(this);\n        this.addLine = this.addLine.bind(this);\n    }\n\n    editLine(e){\n        if(!this.state.isEditing){\n            this.setState({ isEditing: true })\n            this.setState({\n                editLocation: {\n                    x: e.clientX - ((window.innerWidth - 500) / 2),\n                    y: e.clientY - ((window.innerHeight - 700) / 2)\n                }\n             })\n        }   \n    }\n\n    editText(e){\n        e.stopPropagation();\n\n        const selectedText = this.state.lines[e.target.getAttribute(\"textid\")];\n        this.setState({pendingLine: selectedText});\n        this.setState({lines: {...this.state.lines, [e.target.getAttribute('textid')]: ''}})\n        this.setState({editValue: selectedText.props.children});\n        this.editLine(e);\n    }\n\n    doneEditing(type){\n        switch(type){\n            case ADD_LINE:\n                this.addLine(this.state.editValue); \n                break;\n            case EXIT:\n                if(this.state.pendingLine){\n                    this.setState({\n                        lines: {\n                            ...this.state.lines,\n                            [this.state.pendingLine.key]: this.state.pendingLine\n                        }\n                    });\n                }\n                this.setState({pendingLine: ''});\n                break;\n            case REMOVE_LINE:\n                this.setState({\n                   lines: {\n                       ...this.state.lines,\n                        [this.state.pendingLine.key]: ''\n                   } \n                })\n                this.setState({ pendingLine: '' });\n                break;\n            default:\n        }\n\n        this.setState({isEditing: false})\n        this.setState({editValue: ''})\n    }\n\n    addLine(text){\n        if(text.trim() !== ''){\n            let newKey = new Date().toISOString();\n            this.setState({ lines: {\n                ...this.state.lines, \n                [newKey]: <Text \n                    editText={this.editText} \n                    editLocation={this.state.editLocation}\n                    key={newKey}\n                    textId={newKey}\n                >{text}</Text>\n            }})\n        } \n        console.log(this.state.lines)   \n    }\n\n    handleInput(e){\n        this.setState({editValue: e.target.value})\n    }\n\n    render(){\n        return(         \n                <div className=\"page\" onDoubleClick={this.editLine} style={{marginTop: (window.innerHeight - 700) / 2 }}>\n                    {Object.values(this.state.lines)}\n                    {this.state.isEditing ?\n                        <Input\n                            doneEditing={this.doneEditing}\n                            handleInput={this.handleInput}\n                            editValue={this.state.editValue}\n                            editLocation={this.state.editLocation}\n                        />\n                        : ''\n                    }\n                </div>  \n        )   \n    }\n}\n\nexport default Page;","import React from 'react';\nimport html2canvas from 'html2canvas';\n\nclass Capture extends React.Component{\n\n    constructor(props){\n        super(props)\n\n        this.capturePage = this.capturePage.bind(this);\n    }\n\n    capturePage() {\n        html2canvas(document.querySelector('.page'))\n         .then(canvas => {\n             document.body.appendChild(canvas);\n         })\n    }\n    render(){\n        return(\n            <div>\n                <button onClick={this.capturePage}>capture</button>\n            </div>\n            \n        )\n    }\n}\n\nexport default Capture;","import React from 'react';\nimport Capture from './capture';\nimport Print from './print';\n\nconst Settings = props => {\n    return(\n        <div>\n            <Capture />\n        </div>\n    )\n}\n\nexport default Settings;","import React from 'react';\n\nclass Print extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.printPoem = this.printPoem.bind(this);\n    }\n\n    printPoem(){\n        \n    }\n\n    render(){\n        return(\n            <button onClick={this.printPoem}>print</button>\n        )\n    }\n}\n\nexport default Print","import React, { Fragment } from 'react';\nimport Page from './components/page'\nimport Settings from './components/settings';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <Fragment>\n      <Page />\n      <Settings />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}